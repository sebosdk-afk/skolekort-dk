name: Byg skoler.json automatisk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"   # valgfrit: kør mandag kl. 03

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas chardet

      - name: Generer skoler.json (robust + hjemmesidefelt)
        env:
          LIMIT: "0"   # "0" = alle rækker. Sæt "300" for en hurtig test.
        shell: python
        run: |
          import pandas as pd, json, os, pathlib, re, csv, chardet

          DATA_DIR = pathlib.Path("data")
          csv_path = DATA_DIR / "folkeskoler.csv"

          # --- Encoding + delimiter detektion ---
          raw = csv_path.read_bytes()
          head = raw[:65536]
          enc = (chardet.detect(head).get("encoding") or "utf-8").lower()
          if head.startswith(b"\xff\xfe") or head.startswith(b"\xfe\xff"):
            enc = "utf-16"

          try:
            sample = head.decode(enc, errors="ignore")
          except:
            sample = head.decode("utf-8", errors="ignore")

          try:
            dialect = csv.Sniffer().sniff(sample, delimiters=";,|\t")
            sep = dialect.delimiter
          except:
            sep = None

          print("Encoding:", enc, "Delimiter:", repr(sep))

          # --- Læs CSV ---
          df = pd.read_csv(csv_path, sep=sep, engine="python", encoding=enc)

          # --- Fjern nulbytes + trim tekst ---
          for c in df.select_dtypes(include=["object"]).columns:
            df[c] = df[c].astype(str).str.replace("\x00","",regex=False).str.strip()

          # --- Kolonnematch ---
          def norm(s): return re.sub(r'[^a-z0-9]','',str(s).lower())
          nmap = {c: norm(c) for c in df.columns}
          inv  = {v:k for k,v in nmap.items()}
          def pick(*ns):
            for n in ns:
              if n in inv: return inv[n]

          col_inst = pick("instnr","institutionsnummer","institutionnummer","inst")
          col_navn = pick("instnavn","institutionsnavn","skolenavn","navn")
          col_adr  = pick("instadr","adresse","vejnavn","vej")
          col_post = pick("postnr","postnummer")
          col_by   = pick("postdistrikt","by","bynavn")
          col_kom  = pick("belkommunenavn","kommunenavn","admkommunenavn","kommune")
          col_reg  = pick("regionnavn","region")
          col_lat  = pick("geobreddegrad","latitude","lat")
          col_lon  = pick("geolaengdegrad","longitude","lon","lng")

          # --- NYT: hjemmeside-kolonne + URL-rens ---
          col_web  = pick("hjemmeside","webadresse","internetadresse","url","hjemmesideurl")
          def clean_url(v):
            s = str(v or "").strip()
            if not s:
              return ""
            s = s.replace(" ", "")
            if not s.startswith(("http://","https://")):
              s = "https://" + s.lstrip("/")
            return s

          req = [col_inst,col_navn,col_adr,col_post,col_by,col_kom]
          miss = [c for c in req if not c]
          if miss:
            raise SystemExit(f"Mangler kolonner: {miss}\nHar: {list(df.columns)}")

          def to_float(v):
            try:
              v = str(v).replace(",",".")
              return float(v)
            except:
              return None

          limit = int(os.getenv("LIMIT","0") or "0")
          if limit>0: df = df.head(limit)

          rows=[]
          for _, r in df.iterrows():
            adr = ", ".join([
              str(r.get(col_adr,"") or "").strip(),
              f'{str(r.get(col_post,"") or "").strip()} {str(r.get(col_by,"") or "").strip()}'
            ]).strip(", ")
            rows.append({
              "id": str(r.get(col_inst,"") or ""),
              "navn": str(r.get(col_navn,"") or ""),
              "adresse": adr,
              "postnr": str(r.get(col_post,"") or ""),
              "by": str(r.get(col_by,"") or ""),
              "kommune_navn": str(r.get(col_kom,"") or ""),
              "region_navn": str(r.get(col_reg,"") or "") if col_reg else "",
              "lon": to_float(r.get(col_lon)) if col_lon else None,
              "lat": to_float(r.get(col_lat)) if col_lat else None,
              # --- NYT: hjemmeside medtaget og renset ---
              "hjemmeside": clean_url(r.get(col_web,"")) if col_web else ""
            })

          out = DATA_DIR / "skoler.json"
          out.write_text(json.dumps(rows, ensure_ascii=False, indent=2), encoding="utf-8")
          print("✅ Skrev", len(rows), "skoler til", out)

      - name: Commit & Push
        run: |
          git config user.name "Auto Data Bot"
          git config user.email "bot@example.com"
          git add data/skoler.json
          git commit -m "Opdateret skoler.json (inkl. hjemmeside)"
          git push
