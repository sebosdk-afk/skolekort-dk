name: Byg skoler.json automatisk

on:
  workflow_dispatch:          # gør "Run workflow" knappen synlig
  schedule:
    - cron: "0 3 * * 1"       # (valgfrit) kør hver mandag kl. 03

permissions:
  contents: write             # må committe skoler.json

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas requests chardet

      # Laver data/skoler.json direkte fra CSV (bruger dine kolonnenavne)
      - name: Generer skoler.json (fra CSV med lat/lon + region)
        env:
          LIMIT: "0"        # sæt til "0" eller slet linjen for ALLE rækker
        shell: python
        run: |
          import pandas as pd, json, os, pathlib, re

          csv_path = pathlib.Path("data/folkeskoler.csv")
          # latin1 passer typisk til danske CSV-udtræk
          df = pd.read_csv(csv_path, sep=None, engine="python", encoding="latin1")
          print("CSV columns:", list(df.columns))

          # normaliser navne (til fleksibel matching)
          def norm(s): return re.sub(r'[^a-z0-9]', '', str(s).lower())
          nmap = {c: norm(c) for c in df.columns}
          inv  = {v: k for k, v in nmap.items()}  # norm -> original

          def pick(*norm_names):
              for n in norm_names:
                  if n in inv: 
                      return inv[n]

          # — dine reelle felter (fra dit screenshot) + aliaser —
          col_inst = pick("instnr","institutionsnummer","institutionnummer","inst")
          col_navn = pick("instnavn","institutionsnavn","skolenavn")
          col_adr  = pick("instadr","adresse","vejnavn","vej")
          col_post = pick("postnr","postnummer")
          col_by   = pick("postdistrikt","by","bynavn")
          col_kom  = pick("belkommunenavn","kommunenavn","admkommunenavn")
          col_reg  = pick("regionnavn")
          col_lat  = pick("geobreddegrad","latitude","lat")
          col_lon  = pick("geolaengdegrad","longitude","lon","lng")

          required = [col_inst,col_navn,col_adr,col_post,col_by,col_kom]
          missing  = [c for c in required if not c]
          if missing:
              raise SystemExit(f"Mangler kolonner i CSV: {missing}")

          limit = int(os.getenv("LIMIT","0") or "0")
          if limit > 0:
              df = df.head(limit)

          rows=[]
          for _, r in df.iterrows():
              adr = f"{str(r.get(col_adr,'') or '').strip()}, {str(r.get(col_post,'') or '').strip()} {str(r.get(col_by,'') or '').strip()}".strip(", ").replace("  "," ")

              def to_float(v):
                  try:
                      v = str(v).replace(",", ".")
                      return float(v)
                  except:
                      return None

              lat = to_float(r.get(col_lat, None)) if col_lat else None
              lon = to_float(r.get(col_lon, None)) if col_lon else None
              region_navn = str(r.get(col_reg, "") or "").strip() if col_reg else ""

              rows.append({
                  "id": str(r.get(col_inst,"") or ""),
                  "navn": str(r.get(col_navn,"") or ""),
                  "adresse": adr,
                  "postnr": str(r.get(col_post,"") or ""),
                  "by": str(r.get(col_by,"") or ""),
                  "kommune_navn": str(r.get(col_kom,"") or ""),
                  "region_navn": region_navn,
                  "lon": lon,
                  "lat": lat
              })

          pathlib.Path("data/skoler.json").write_text(
              json.dumps(rows, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )
          print("✅ Skrev", len(rows), "skoler til data/skoler.json")

      - name: Commit & Push
        run: |
          git config user.name "Auto Data Bot"
          git config user.email "bot@example.com"
          git add data/skoler.json
          git commit -m "Opdateret skoler.json (auto)" || echo "Ingen ændringer"
          git push
