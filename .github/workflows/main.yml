name: Byg skoler.json automatisk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas requests chardet

      - name: Generer skoler.json (automatisk)
        env:
          LIMIT: "200"   # vi starter med 200 rækker for at teste hurtigere
        run: |
          python - <<'PY'
          import pandas as pd, requests, json, time
          from chardet import detect
          import pathlib, os

          csv_file = pathlib.Path("data/folkeskoler.csv")
          raw = csv_file.read_bytes()
          enc = detect(raw)["encoding"] or "latin1"

          df = pd.read_csv(csv_file, sep=None, engine="python", encoding=enc, low_memory=False)
          df.columns = [c.strip().lower() for c in df.columns]

          def pick(*opts):
              for o in opts:
                  if o in df.columns:
                      return o

          col_inst = pick("institutionsnummer","instnr","institutionnummer")
          col_navn = pick("institutionsnavn","navn","institution")
          col_vej  = pick("vejnavn","adresse","vej")
          col_hus  = pick("husnr","husnummer","nr")
          col_post = pick("postnr","postnummer")
          col_by   = pick("bynavn","by","postdistrikt")
          col_kom  = pick("kommunenavn","kommune")

          required = [col_inst,col_navn,col_vej,col_post,col_by,col_kom]
          missing = [x for x in required if not x]
          if missing:
              raise SystemExit("Mangler kolonner: " + str(missing))

          limit = int(os.getenv("LIMIT","0"))
          if limit > 0:
              df = df.head(limit)

          kommuner = requests.get("https://api.dataforsyningen.dk/kommuner?format=json").json()
          kom2reg = {k["navn"]: k["region"]["navn"] for k in kommuner}

          output = []
          for _, r in df.iterrows():
              adr = f"{r[col_vej]} {r.get(col_hus,'')}, {r[col_post]} {r[col_by]}".replace("  "," ").strip(", ")
              try:
                  res = requests.get("https://api.dataforsyningen.dk/adresser", params={"q": adr, "per_side":1}).json()
                  if res:
                      lon, lat = res[0]["adgangsadresse"]["adgangspunkt"]["koordinater"]
                  else:
                      lon = lat = None
              except:
                  lon = lat = None

              kommune = r[col_kom]
              region = kom2reg.get(kommune, "")

              output.append({
                  "id": str(r[col_inst]),
                  "navn": r[col_navn],
                  "adresse": adr,
                  "postnr": r[col_post],
                  "by": r[col_by],
                  "kommune_navn": kommune,
                  "region_navn": region,
                  "lon": lon,
                  "lat": lat
              })

              time.sleep(0.03)

          pathlib.Path("data/skoler.json").write_text(json.dumps(output, ensure_ascii=False, indent=2), encoding="utf-8")
          print("✅ Skrev", len(output), "skoler til data/skoler.json")
PY
      - name: Commit & Push
        run: |
          git config user.name "Auto Data Bot"
          git config user.email "bot@example.com"
          git add data/skoler.json
          git commit -m "Automatisk opdateret skoler.json" || echo "Ingen ændringer"
          git push
