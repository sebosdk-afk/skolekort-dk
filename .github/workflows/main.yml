name: Byg skoler.json automatisk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"  # valgfrit: kør hver mandag kl. 03

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas requests chardet

      - name: Generer skoler.json (geokodning + region, robust kolonnematch)
        env:
          LIMIT: "300"
        shell: python
        run: |
          import pandas as pd, requests, json, time, os, pathlib, re
          from chardet import detect

          csv_path = pathlib.Path("data/folkeskoler.csv")
          raw = csv_path.read_bytes()
          enc = detect(raw)["encoding"] or "latin1"

          # Læs CSV robust
          df = pd.read_csv(csv_path, sep=None, engine="python", encoding=enc)
          # Vis kolonner i loggen for fejlsøgning
          print("CSV columns:", list(df.columns))

          # Normaliser kolonnenavne (fjern mellemrum, punktum, specialtegn)
          def norm(s): return re.sub(r'[^a-z0-9]', '', str(s).lower())
          original_cols = list(df.columns)
          df.columns = [norm(c) for c in df.columns]
          colmap = {norm(o): o for o in original_cols}  # map norm -> original

          # Hjælper til at finde den første kandidat der findes i CSV
          def find(*cands):
            for c in cands:
              nc = norm(c)
              if nc in df.columns:
                return nc

          # Kandidatlister (masse aliaser)
          inst_col = find("institutionsnummer","instnr","institutionnummer","institutionsnr","institutionensnummer","skoleid","skolekode","skolenr","inst")
          navn_col = find("institutionsnavn","navn","institution","skolenavn","skole")
          vej_col  = find("vejnavn","adresse","vej","adresselinje","adresse1","vej")
          hus_col  = find("husnr","husnummer","nr","hus","hus nr")
          post_col = find("postnr","postnummer","zip","postalcode","post")
          by_col   = find("bynavn","by","postdistrikt","city","postdistriktnavn","postby")
          kom_col  = find("kommunenavn","kommune","kommunenavntekst","kommunenrnavn")

          required = [inst_col,navn_col,vej_col,post_col,by_col,kom_col]
          if any(c is None for c in required):
            print("Efter normalisering kunne vi ikke finde alle felter.")
            print("Normerede kolonner:", list(df.columns))
            raise SystemExit(f"Mangler: {[('inst',inst_col),('navn',navn_col),('vej',vej_col),('post',post_col),('by',by_col),('kommune',kom_col)]}")

          # Begrænsning ved test
          limit = int(os.getenv("LIMIT","0") or "0")
          if limit > 0:
            df = df.head(limit)

          # Kommune -> region (DAGI)
          kommuner = requests.get("https://api.dataforsyningen.dk/kommuner?format=json", timeout=30).json()
          kom2reg = {k["navn"]: k["region"]["navn"] for k in kommuner}

          rows = []
          for _, r in df.iterrows():
              vej  = str(r.get(vej_col,"") or "").strip()
              hus  = str(r.get(hus_col,"") or "").strip() if hus_col else ""
              post = str(r.get(post_col,"") or "").strip()
              by   = str(r.get(by_col,"") or "").strip()
              adr  = f"{vej} {hus}, {post} {by}".replace("  "," ").strip(", ").strip()

              lon = lat = None
              try:
                  q = requests.get("https://api.dataforsyningen.dk/adresser",
                                   params={"q": adr, "per_side":1}, timeout=20)
                  js = q.json()
                  if isinstance(js, list) and js:
                      lon, lat = js[0]["adgangsadresse"]["adgangspunkt"]["koordinater"]
              except Exception as e:
                  print("Geokodningsfejl:", adr, e)

              kom = str(r.get(kom_col,"") or "").strip()
              reg = kom2reg.get(kom, "")

              rows.append({
                  "id": str(r.get(inst_col,"") or ""),
                  "navn": str(r.get(navn_col,"") or ""),
                  "adresse": adr,
                  "postnr": post,
                  "by": by,
                  "kommune_navn": kom,
                  "region_navn": reg,
                  "lon": lon,
                  "lat": lat
              })

              time.sleep(0.03)

          pathlib.Path("data/skoler.json").write_text(
              json.dumps(rows, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )
          print("✅ Skrev", len(rows), "skoler til data/skoler.json")

      - name: Commit & Push
        run: |
          git config user.name "Auto Data Bot"
          git config user.email "bot@example.com"
          git add data/skoler.json
          git commit -m "Opdateret skoler.json (auto)" || echo "Ingen ændringer"
          git push
