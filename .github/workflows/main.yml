name: Byg skoler.json automatisk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas requests chardet

      - name: Generer skoler.json (robust)
        env:
          LIMIT: "300"
        run: |
          python - <<'PY'
          import pandas as pd, requests, json, pathlib, time
          from chardet import detect

          csv_path = pathlib.Path("data/folkeskoler.csv")
          raw = csv_path.read_bytes()
          enc = (detect(raw)["encoding"] or "latin1")

          df = pd.read_csv(csv_path, sep=None, engine="python", encoding=enc, low_memory=False)
          df.columns = [c.strip().lower() for c in df.columns]

          def pick(*names):
            for n in names:
              if n in df.columns: return n

          col_inst   = pick("institutionsnummer","instnr","institutionnummer")
          col_navn   = pick("institutionsnavn","navn","institution")
          col_vej    = pick("vejnavn","adresse","vej")
          col_hus    = pick("husnr","husnummer","nr")
          col_post   = pick("postnr","postnummer")
          col_by     = pick("bynavn","by","postdistrikt")
          col_kom    = pick("kommunenavn","kommune")

          need = [col_inst,col_navn,col_vej,col_post,col_by,col_kom]
          miss = [x for x in need if not x]
          if miss:
            raise SystemExit(f"Mangler kolonner i CSV: {miss}\nHar: {list(df.columns)}")

          import os
          limit = int(os.getenv("LIMIT","0") or "0")
          if limit > 0:
            df = df.head(limit)

          kommuner = requests.get("https://api.dataforsyningen.dk/kommuner?format=json", timeout=30).json()
          kom2reg = {k["navn"]: k["region"]["navn"] for k in kommuner}

          rows=[]
          for i, r in df.iterrows():
            vej = (str(r.get(col_vej,""))).strip()
            hus = (str(r.get(col_hus,""))).strip() if col_hus else ""
            pn  = (str(r.get(col_post,""))).strip()
            by  = (str(r.get(col_by,""))).strip()
            adr = f"{vej} {hus}, {pn} {by}".replace("  "," ").strip(", ").strip()

            lon = lat = None
            try:
              q = requests.get("https://api.dataforsyningen.dk/adresser",
                               params={"q": adr, "per_side":1}, timeout=20)
              js = q.json()
              if js:
                lon, lat = js[0]["adgangsadresse"]["adgangspunkt"]["koordinater"]
            except:
              pass

            kom = (str(r.get(col_kom,""))).strip()
            reg = kom2reg.get(kom, "")

            rows.append({
              "id": str(r.get(col_inst,"") or ""),
              "navn": str(r.get(col_navn,"") or ""),
              "adresse": adr,
              "postnr": pn,
              "by": by,
              "kommune_navn": kom,
              "region_navn": reg,
              "lon": lon,
              "lat": lat
            })

            time.sleep(0.03)

          pathlib.Path("data/skoler.json").write_text(json.dumps(rows, ensure_ascii=False, indent=2), encoding="utf-8")
PY

      - name: Commit & Push
        run: |
          git config user.name "Auto Data Bot"
          git config user.email "bot@example.com"
          git add data/skoler.json
          git commit -m "Opdater skoler.json (auto)" || echo "Ingen ændringer"
          git push
