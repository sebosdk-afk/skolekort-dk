name: Byg skoler.json automatisk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"  # mandag kl. 03:00

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Installer afhængigheder
        run: pip install pandas requests python-dateutil

      - name: Generer skoler.json (robust m. encoding-fallback)
        env:
          LIMIT: "200"   # kør færre rækker første run; sæt til 0 eller fjern når det virker
        run: |
          python3 << 'EOF'
          import pandas as pd, requests, json, os, time, sys

          path = "data/folkeskoler.csv"

          # --- Læs CSV med fallback-encodings ---
          encodings = ["utf-8-sig", "cp1252", "latin1"]
          last_err = None
          for enc in encodings:
              try:
                  df = pd.read_csv(path, sep=None, engine="python", encoding=enc, low_memory=False)
                  used_enc = enc
                  break
              except Exception as e:
                  last_err = e
                  df = None
          if df is None:
              raise SystemExit(f"Kunne ikke læse CSV med encodings {encodings}: {last_err}")

          print(f"Læst CSV med encoding: {used_enc}, shape={df.shape}")

          # Normaliser kolonnenavne
          df.columns = [c.strip().lower() for c in df.columns]

          def pick(*names):
              for n in names:
                  if n in df.columns: return n
              return None

          col_instnr   = pick("institutionsnummer","instnr","institutionnummer")
          col_instnavn = pick("institutionsnavn","navn","institution")
          col_vejnavn  = pick("vejnavn","adresse","vej")
          col_husnr    = pick("husnr","husnummer","nr")
          col_postnr   = pick("postnr","postnummer")
          col_bynavn   = pick("bynavn","by","postdistrikt")
          col_kommune  = pick("kommunenavn","kommune")

          needed = [col_instnr,col_instnavn,col_vejnavn,col_postnr,col_bynavn,col_kommune]
          missing = [x for x in needed if not x]
          if missing:
              raise SystemExit(f"Mangler forventede kolonner i CSV: {missing}. Fundne kolonner: {list(df.columns)}")

          limit = int(os.getenv("LIMIT","0"))
          if limit>0: df = df.head(limit)

          # Hent kommuner -> region
          kommuner = requests.get("https://api.dataforsyningen.dk/kommuner?format=json", timeout=30).json()
          kom2reg = {k["nav]()
